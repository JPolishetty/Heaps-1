/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists == null || lists.length == 0){
            return null;
        }
        //add head of each list to min heap
        ListNode result = new ListNode(-1);
        ListNode curr = result;
        PriorityQueue<ListNode> pq = new PriorityQueue<>((x, y) -> x.val - y.val);
        for(int i=0; i< lists.length; i++){
            if(lists[i] != null){
                pq.add(lists[i]);
            }
        }
        //keep adding min element in minheap to result list and its next to minheap
        while(!pq.isEmpty()){
            ListNode currList = pq.poll();
            curr.next = currList;
            curr = curr.next;
            if(currList.next != null){
                pq.add(currList.next);
            }
        }
        return result.next;
    }
}
